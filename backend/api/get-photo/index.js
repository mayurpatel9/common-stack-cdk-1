"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPhoto = void 0;
const aws_sdk_1 = require("aws-sdk");
const get_photos_1 = require("../get-photos");
const s3 = new aws_sdk_1.S3();
const bucketName = process.env.PHOTO_BUCKET_NAME;
async function getPhoto(event, context) {
    console.log("I got bucket name is it's " + bucketName);
    try {
        const { Contents: results } = await s3.listObjects({ Bucket: bucketName }).promise();
        const photos = await Promise.all(results.map(result => (0, get_photos_1.generateUrl)(result)));
        const photo = photos.at(await between(0, 2));
        return {
            statusCode: 200,
            headers: {
                "Access-Control-Allow-Headers": "*",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "*",
                "Accept": '*/*',
                "Content-Type": 'application/json'
            },
            body: JSON.stringify(photo)
        };
    }
    catch (error) {
        return {
            statusCode: 500,
            body: JSON.stringify(error)
        };
    }
}
exports.getPhoto = getPhoto;
async function between(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBNkI7QUFDN0IsOENBQTRDO0FBRTVDLE1BQU0sRUFBRSxHQUFHLElBQUksWUFBRSxFQUFFLENBQUM7QUFDcEIsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBa0IsQ0FBQztBQUVsRCxLQUFLLFVBQVUsUUFBUSxDQUFDLEtBQTZCLEVBQUUsT0FBZ0I7SUFFbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUV2RCxJQUFHO1FBQ0MsTUFBTSxFQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVyRixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUEsd0JBQVcsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFOUUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3QyxPQUFNO1lBQ0YsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUU7Z0JBQ0wsOEJBQThCLEVBQUUsR0FBRztnQkFDbkMsNkJBQTZCLEVBQUUsR0FBRztnQkFDbEMsOEJBQThCLEVBQUUsR0FBRztnQkFDbkMsUUFBUSxFQUFDLEtBQUs7Z0JBQ2QsY0FBYyxFQUFFLGtCQUFrQjthQUNyQztZQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUM5QixDQUFDO0tBQ0w7SUFBQyxPQUFNLEtBQUssRUFBRTtRQUNYLE9BQU07WUFFRixVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUM5QixDQUFBO0tBQ0o7QUFFRCxDQUFDO0FBUVEsNEJBQVE7QUFOakIsS0FBSyxVQUFVLE9BQU8sQ0FBQyxHQUFXLEVBQUUsR0FBVztJQUMzQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQ2IsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FDcEMsQ0FBQTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudFYyLCBDb250ZXh0LCBBUElHYXRld2F5UHJveHlSZXN1bHRWMn0gZnJvbSAnYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IFMzIH0gZnJvbSAnYXdzLXNkayc7XHJcbmltcG9ydCB7IGdlbmVyYXRlVXJsIH0gZnJvbSAgJy4uL2dldC1waG90b3MnXHJcblxyXG5jb25zdCBzMyA9IG5ldyBTMygpO1xyXG5jb25zdCBidWNrZXROYW1lID0gcHJvY2Vzcy5lbnYuUEhPVE9fQlVDS0VUX05BTUUhO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0UGhvdG8oZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50VjIsIGNvbnRleHQ6IENvbnRleHQpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdFYyPiB7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJJIGdvdCBidWNrZXQgbmFtZSBpcyBpdCdzIFwiICsgYnVja2V0TmFtZSk7XHJcblxyXG4gICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IHtDb250ZW50czogcmVzdWx0c30gPSBhd2FpdCBzMy5saXN0T2JqZWN0cyh7QnVja2V0OiBidWNrZXROYW1lfSkucHJvbWlzZSgpO1xyXG5cclxuICAgIGNvbnN0IHBob3RvcyA9IGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdHMhLm1hcChyZXN1bHQgPT4gZ2VuZXJhdGVVcmwocmVzdWx0KSkpO1xyXG5cclxuICAgIGNvbnN0IHBob3RvID0gcGhvdG9zLmF0KGF3YWl0IGJldHdlZW4oMCwgMikpO1xyXG5cclxuICAgIHJldHVybntcclxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIjogXCIqXCIsXHJcbiAgICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxyXG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogXCIqXCIsXHJcbiAgICAgICAgICAgIFwiQWNjZXB0XCI6JyovKicsXHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGhvdG8pXHJcbiAgICB9O1xyXG59IGNhdGNoKGVycm9yKSB7XHJcbiAgICByZXR1cm57XHJcblxyXG4gICAgICAgIHN0YXR1c0NvZGU6IDUwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShlcnJvcilcclxuICAgIH1cclxufVxyXG5cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gYmV0d2VlbihtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoXHJcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluXHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCB7IGdldFBob3RvIH0iXX0=